version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: productsync_postgres
    environment:
      POSTGRES_DB: productsync
      POSTGRES_USER: productsync
      POSTGRES_PASSWORD: productsync
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productsync"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: productsync_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ProductSync API
  api:
    build: .
    container_name: productsync_api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_DEBUG=True
      - DATABASE_URL=postgresql://productsync:productsync@postgres:5432/productsync
      - REDIS_URL=redis://redis:6379
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ProductSync Workers
  worker:
    build: .
    container_name: productsync_worker
    command: celery -A app.workers.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://productsync:productsync@postgres:5432/productsync
      - REDIS_URL=redis://redis:6379
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - NOTION_TOKEN=${NOTION_TOKEN}
      - JIRA_URL=${JIRA_URL}
      - JIRA_USERNAME=${JIRA_USERNAME}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
    volumes:
      - .:/app
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  beat:
    build: .
    container_name: productsync_beat
    command: celery -A app.workers.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://productsync:productsync@postgres:5432/productsync
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower for monitoring Celery tasks
  flower:
    build: .
    container_name: productsync_flower
    command: celery -A app.workers.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 